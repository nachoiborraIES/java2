{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Software engineering","text":"<p>This website is (or will be) a complete course for the Java programming language. Along the different blocks of contents, we will navigate through the most important parts of this language, including Java basics (data types, user interaction...), conditions, loops, static and dynamic structures (arrays, lists...), functions, classes and objects... and also some advanced features, such as file management, dates, regular expressions, unit testing, JavaFX applications and much more.</p> <p>The use of these materials is subject to a Creative Commons License CC BY-NC.</p>"},{"location":"01.html","title":"Getting started","text":"<p>Before starting with Java programming language, you should have some knowledge about what a programming language is, which are the most important programming languages nowadays and how to compile and run a Java program. Here you have some external links to read about it (you may open them in new tabs or windows):</p> <ul> <li>Programs, languages and compilers, in which you'll learn what programs and programming languages are, and how to run them using language translators.</li> <li>First steps with Java, in which you'll see how to install Java and create your first program.</li> <li>Using Geany, a simple tool to create and run programs in many languages.</li> <li>Using IntelliJ, an advanced tool to manage Java projects.</li> </ul>"},{"location":"01a.html","title":"Structure of a Java program","text":"<p>Java is an object-oriented programming language, and this implies that we need to work with classes and objects. We'll see later what a class is, but, for now, we only need to know that every piece of code in Java needs to be placed inside a <code>class</code> clause.</p>"},{"location":"01a.html#1-our-first-java-program","title":"1. Our first Java program","text":"<p>Let's see how to start with Java, by creating a simple Java program that prints \"Hello\" in the screen.</p> <pre><code>public class MyClass\n{\n    public static void main(String[] args)\n    {\n        System.out.println(\"Hello\");\n    }\n}\n</code></pre> <p>Let's explain this code:</p> <ul> <li>First line initializes the class in which we are going to place the code. We are creating a class called MyClass.</li> <li>Every code inside this class must be enclosed in curly braces <code>{</code> ... <code>}</code></li> <li>Next, we start another piece of code called main, which is the main piece of code that will be launched when we run the program. In Java, this main block must always be public, static and void, and it must have a String[] set of parameters. We'll learn later what all this stuff means. Again, all the code belonging this main block must be enclosed in their corresponding curly braces.</li> <li>Finally, inside the curly braces of the main block, we add every instruction that we want to run. In this case, we are adding a System.out.println instruction, that is in charge of printing in the screen the text that we specify (Hello, in this case). Also, it's important to finish every instruction with a semicolon <code>;</code>. This tells the compiler that the instruction has finished, and we can start evaluating the next one. We could, this way, write more than one instruction per line, although this way of writing programs is not very usual.</li> </ul>"},{"location":"01a.html#2-more-about-this-example","title":"2. More about this example","text":"<p>The structure of this program is very similar to the same program written in C#: we always need to define a class, even if we only need a <code>main</code> block. This <code>main</code> block is written in lower case in Java.</p> <p>Besides, every public class must have the same name as the source file that contains it, so we need to store the source code of the example above in a file called <code>MyClass.java</code> (Java source files have <code>.java</code> extension). If we want to compile this code, we use <code>javac</code> tool from our JDK installation. We can do it through any IDE, such as Geany, or IntelliJ, as long as we have Java JDK properly installed. </p> <pre><code>javac MyClass.java\n</code></pre> <p>Then, a new file called <code>MyClass.class</code> will be generated. This is the compiled file that can be run under the Java Virtual Machine (JVM), using the <code>java</code> command. This last step can also be done under any IDE.</p> <pre><code>java MyClass\n</code></pre> <p>After running this program, we will see a \"Hello\" message in the screen.</p>"},{"location":"01b.html","title":"Variables and operators","text":""},{"location":"01b.html#1-using-variables","title":"1. Using variables","text":"<p>Variables are essential elements in every program, since they let us store values in them, so that we can operate with them, or modify them along the program execution. Every variable has a type which lets us know what kind of information we can store in it. For instanec, there are integer variables, that lets us store integer numbers, or string variables to manage texts. We'll learn about data types in other sections.</p> <p>Whenever we want to use a variable we must declare it. This step consists in:</p> <ul> <li>Specifying the data type of the variable (integer, text...)</li> <li>Specifying the name of the variable, which is also known as the variable identifier. </li> </ul> <p>For instance, this way we declare a variable to store integer values, using the word <code>int</code> to specify the data type:</p> <pre><code>int myVariable;\n</code></pre> <p>Additionally, we can also assign a value to the variable. This step can be done either when we declare it, or later in the code:</p> <pre><code>int myVariable = 3;\nint myOtherVariable;\n...\nmyOtherVariable = 5;\n</code></pre> <p>Also, variables can change their values in later sentences.</p> <pre><code>int myVariable = 3;\n...\nmyVariable = 5;\n</code></pre> <p>We can also declare multiple variables of the same type in the same line, separated by commas, and we can decide for each one if we want to assign an initial value or not:</p> <pre><code>int number1 = 0, number2, result = 1;\n</code></pre> <p>Regarding the identifier, it can contain letters (in either lower or upper case), digits, and the underscore symbol <code>_</code>, but it can't start with a digit. These are examples of valid identifiers (they usually start with a lower case letter in Java, but this is not compulsory)</p> <pre><code>int aNumber;\nint another_number;\nint number1;\nint _one_more_number;\n</code></pre> <p>Whereas these are examples of non-valid identifiers:</p> <pre><code>int 1number;\nint another number;\n</code></pre> <p>We can use the <code>System.out.println</code> instruction to show the value of a variable in the screen:</p> <pre><code>public class MyClass\n{\n    public static void main(String[] args)    \n    {\n        int myVariable = 3;\n        System.out.println(myVariable);\n    }\n}\n</code></pre>"},{"location":"01b.html#2-some-basic-java-operators","title":"2. Some basic Java operators","text":"<p>Operators let us evaluate expressions and produce a given result. For instance, if we use the addition operator <code>+</code> we can sum a couple of numbers and get the final result. This final result can either be assigned to a variable or shown in the screen.</p> <pre><code>int result = 3 + 4;\nSystem.out.println(32 + 52);\n</code></pre>"},{"location":"01b.html#21-arithmetic-operators","title":"2.1. Arithmetic operators","text":"<p>Arithmetic operators let us do some basic, mathematical operations with numbers. This is the list of basic arithmetic operators in Java:</p> Operator Meaning <code>+</code> Addition <code>-</code> Substraction <code>*</code> Multiplication <code>/</code> Division <code>%</code> Division module <p>Regarding the division operator, we must take into account that it produces a result of the same type that the numbers involved. In other words, if we divide two integer numbers, such as 5 / 2, then the result will be integer (2), not real. The module operator gets the module of an integer division. In previous example, 5 % 2 gets the module of dividing 5 by 2, which is 1.</p> <p>Operator precedence</p> <p>The order in which operators are evaluated in an arithmetic expression is important. For instance, if we set an expression like this one:</p> <pre><code>int result = 4 + 2 / 2;\n</code></pre> <p>Then <code>result</code> variable gets a final value of 5, because the division <code>2 / 2</code> is evaluated BEFORE the addition. This is the precedence order for arithmetic operators:</p> <ol> <li>Multiplications, divisions and modules</li> <li>Additions and substractions</li> </ol> <p>If there are more than one operator of the same range in an operation, then they are evaluated from left to right. For instance, in this case, we first apply the multiplication, and then the division, and the final result is 2:</p> <pre><code>int result = 4 * 3 / 6;\n</code></pre> <p>However, we can alter the order in which operations are evaluated in an expression, putting between parentheses the operations that we want to evaluate in first places. This expression has a result of 0, because we are forcing to evaluate the division 3 / 6 = 0 in first place.</p> <pre><code>int result = 4 * (3 / 6);\n</code></pre> <p>This other expression has a reuslt of 3, because we are forcing to evaluate the addition before the division:</p> <pre><code>int result = (4 + 2) / 2;\n</code></pre> <p>Exercise 1</p> <p>Try to determine the final value stored in <code>result</code> variable in each one of these expressions. You can write a small Java program later to check your answers.</p> <ul> <li><code>int result = 4 + 8 * 2 / 4</code></li> <li><code>int result = (4 + 8) * 2 / 4</code></li> <li><code>int result = (4 + 8) * 3 % 5</code></li> </ul>"},{"location":"01b.html#22-assignment-operators","title":"2.2. Assignment operators","text":"<p>We have already used the <code>=</code> operator to assign a value to a variable. But there are some other assignment operators that we can use if we want to include some arithmetic operation in the process. For instance, <code>+=</code> operator, which is also known as auto-addition operator, automatically adds the specified value to variable's current value. In this example, the final value of <code>result</code> variable is 5:</p> <pre><code>int result = 3;\nresult += 2;\n</code></pre> <p>This is the list of the assignment operators available:</p> Operator Meaning <code>=</code> Simple assignment <code>+=</code> Auto-addition <code>-=</code> Auto-substraction <code>*=</code> Auto-multiplication <code>/=</code> Auto-division <code>%=</code> Auto-module <p>Auto increment and auto decrement operators</p> <p>Java also provides two additional operators, which are a mix of arithmetic and assignment operators. These operators are the auto-increment <code>++</code> and auto-decrement <code>--</code> operators. They apply to a single variable, and automatically increase or decrease its value in 1 unit, respectively. </p> <p>For instance, final value of <code>result</code> variable in the following code is 4:</p> <pre><code>int result = 3;\nresult++;\n</code></pre> <p>These operators can be placed either before or after the affected variable. There is an important difference that you must take into account regarding the operator placement:</p> <ul> <li>If we place the operator BEFORE the variable in a complex expression, then we first increase/decrease the affected variable, and then we complete the expression. For instance, in this code, the final value of <code>b</code> variable is 6, because we first increase <code>a</code> value (to 4), and then we auto-sum this value to <code>b</code>.</li> </ul> <pre><code>int a = 3, b = 2;\nb += ++a;\n</code></pre> <ul> <li>If we place the operator AFTER the variable in a complex expression, we first evaluate the whole expression, assign the value, and then, we increase/decrease the affected variable. The same code of previous example gets a result of 5 for <code>b</code> variable if we type it like this, although <code>a</code> variable will end with the same final result, which is 4.</li> </ul> <pre><code>int a = 3, b = 2;\nb += a++;\n</code></pre> <p>Note that these rules don't apply if we use the auto-increment or decrement operator in a single line. These two lines have the same effect over variable <code>a</code>:</p> <pre><code>a++;\n++a;\n</code></pre> <p>Exercise 2</p> <p>Determine the final value of <code>result</code> variable after running all these instructions:</p> <pre><code>int result = 4;\nresult += 3;\nresult *= 2;\nresult--;\nresult %= 4;\n</code></pre>"},{"location":"01b.html#3-constants-declaration","title":"3. Constants declaration","text":"<p>Constants are values that never change. We declare constants in Java by declaring the data as <code>final</code> and <code>static</code> (we will learn later the meaning of these terms). Typically these constants are placed at the beginning of the class.</p> <pre><code>class MyClass\n{\n    static final int MAX_USERS = 10;\n    ...\n}\n</code></pre>"},{"location":"01b.html#4-comments","title":"4. Comments","text":"<p>Comments help us clarify some parts of our code, by adding some \"human\" text. This text is ignored by the compiler, but helps the developer understand or find some parts of the code.</p> <p>In Java, there are two types of comments:</p> <ul> <li>Single line comments, which are preceded by a double slash <code>//</code>:</li> </ul> <pre><code>// We declare an integer variable\nint variable = 3;\n</code></pre> <ul> <li>Multiple line comments, which are started by <code>/*</code> and finished by <code>*/</code>. Everything in between makes up the comment, and it's ignored by the compiler:</li> </ul> <pre><code>/* This is a comment of\n   multiple lines before\n   declaring a variable */\nint variable = 3;\n</code></pre>"},{"location":"01c.html","title":"Basic data types","text":"<p>In previous sections we have talked about variables. We have learnt that we can use them to store values, and these values can be of different types. In this section we are going to learn about the basic data types provided by Java, and how we can use them to store values in our programs.</p>"},{"location":"01c.html#1-numeric-types","title":"1. Numeric types","text":"<p>There are two main numeric types in Java:</p> <ul> <li>Integer values, which can be represented by <code>byte</code>, <code>short</code>, <code>int</code> or <code>long</code> data types</li> <li>Real value, which can be represented by <code>float</code> or <code>double</code> data types.</li> </ul>"},{"location":"01c.html#11-integer-data-types","title":"1.1. Integer data types","text":"<p>As we have said before, we can choose among 4 different data types to represent integer values. The choice can be determined by the range of values that we need to deal with. In this table you can see the range of values allowe by each data type:</p> Data type Memory (bytes) Range allowed <code>byte</code> 1 -128 to 127 <code>short</code> 2 -65536 to 65535 <code>int</code> 4 -2.147.483.648 to 2.147.483.647\u200b <code>long</code> 8 up to 18-19 digit numbers <p>For instance, if we want to manage the age of a person, we could use an <code>int</code> variable, but we would waste some memory, since this age is usually lower than 100, and we would just need a single byte to store it. We could use a <code>byte</code> variable instead:</p> <pre><code>byte age = 34;\n</code></pre> <p>However, if we want to store the price of an object, we should use a <code>short</code> or even an <code>int</code> variable:</p> <pre><code>short price = 4200;\nint higherPrice = 2223424;\n</code></pre>"},{"location":"01c.html#12-real-data-types","title":"1.2. Real data types","text":"<p>If we want to deal with real numbers, Java provides two different data types, each one with its own memory space and range:</p> <ul> <li><code>float</code> data type needs 4 bytes of memory, and lets us manage numbers with up to 6-7 significant numbers. For instance, if we want to store PI value in a float variable with just 4 or 5 fraction digits (i.e. 3.14159), we can use a <code>float</code> variable. </li> </ul> <pre><code>float pi = 3.14159;\n</code></pre> <ul> <li><code>double</code> data type needs 8 bytes of memory, and lets us manage numbers with up to 15 significant numbers. This way we can store more fraction digits, if we want to: </li> </ul> <pre><code>double pi = 3.14159265359;\n</code></pre> <p>Regarding <code>float</code> variables, if we want to assign them a direct value, we must specify an <code>f</code> symbol at the end of this value. So the example given before should be written like this (otherwise we'll get a compilation error): </p> <pre><code>float pi = 3.14159f;\n</code></pre>"},{"location":"01c.html#13-the-overflow-problem","title":"1.3. The overflow problem","text":"<p>When we are working with numbers, we may need to do some operations that exceed the maximum range allowed by a data type. For instance, if we are working with two <code>byte</code> values and we add them, we may exceed the maximum range allowed by <code>byte</code> data type, which is 127. This situation is called overflow.</p> <p>So, we must take care of the data types that we choose for each situation, taking into account the different operations that we expect to do with these variables.</p>"},{"location":"01c.html#2-text-types","title":"2. Text types","text":"<p>In order to deal with texts, Java provides two data types:</p> <ul> <li><code>char</code> data type if we want to use single characters or symbols</li> <li><code>String</code> data type if we want to manage complex texts (with more than one character or symbol).</li> </ul> <p>Regarding <code>char</code> data type, it is 2 bytes length, so that we can represent any possible character or symbol. We just declare the corresponding variable, and assign the character represented between single quotes:</p> <pre><code>char symbol = 'a';\n</code></pre> <p>If we want to work with longer texts, then we use <code>String</code> variables, specifying the text between double quotes:</p> <pre><code>String text = \"Hello world\";\n</code></pre>"},{"location":"01c.html#21-escape-sequences","title":"2.1. Escape sequences","text":"<p>There are some special characters that can't be represented easily with the keyboard in a source file. For instance, the new line character, or even the quotes inside a quoted text. For this purpose, we can use escape sequences, this is, special symbols that represent these unwritable elements. This is a list of the most popular escape characters or sequences:</p> Sequence Meaning <code>\\n</code> New line <code>\\t</code> Tabulation <code>\\\"</code> Double quotes <code>\\'</code> Single quotes <code>\\\\</code> Backslash <code>\\</code> <p>These escape sequences can be placed inside a char or string value:</p> <pre><code>char newLine = '\\n';\nString message = \"Hello world.\\n\\\"Quoted text\\\"\";\n</code></pre>"},{"location":"01c.html#22-character-operations","title":"2.2. Character operations","text":"<p>We can do some basic operations with characters. You need to take into account that Java internally treats characters as numeric values, assigning each character a numeric code. For instance, alphabet characters are represented by consecutive numeric values, from <code>a</code> to <code>z</code>. This way, if we add 3 to <code>a</code> value, we will get <code>d</code> value:</p> <pre><code>char symbol = 'a';\nsymbol += 3;\n</code></pre> <p>We can also use <code>+</code> operator in texts (strings), but in this case we are not doing any addition, we are just concatenating texts or expressions. This expressions produces the text \"Hello3\":</p> <pre><code>String text = \"Hello\" + 3;\n</code></pre> <p>Keep in mind that you can't mix arithmetic and text operations in a single line directly. The following expression produces a result of \"Hello32\":</p> <pre><code>String text = \"Hello\" + 3 + 2;\n</code></pre> <p>If you want to calculate the addition and then concatenate the result, then you must prioritize the addition using parentheses. This expression produces a result of \"Hello5\":</p> <pre><code>String text = \"Hello\" + (3 + 2);\n</code></pre>"},{"location":"01c.html#3-conversion-between-data-types","title":"3. Conversion between data types","text":"<p>Sometimes we need to convert a value of some type into another different type. The way we do this step depends on the types involved.</p>"},{"location":"01c.html#31-some-basic-conversions-typecasting","title":"3.1. Some basic conversions. Typecasting","text":"<p>The conversions between numeric values are quite straightforward. We just need to do a typecast, this is, specify between parentheses the data type to which we want to convert the expression. In this example, we are converting <code>pi</code> real value to an integer (so we get 3 as final result):</p> <pre><code>float pi = 3.1416f;\nint piInteger = (int)pi;\n</code></pre> <p>The opposite step can also be done. In this case, we are converting an integer value into a double one (the final value will be 5.0):</p> <pre><code>int number = 5;\ndouble realNumber = (double)number;\n</code></pre> <p>However, this step is NOT necessary if the source type is smaller than the destination type. For instance, a <code>byte</code> doesn't need to be converted into <code>int</code>:</p> <pre><code>byte value = 3;\nint number = value;\n</code></pre> <p>Typecast can be useful, for instance, to convert integer divisions into real ones. This example divides two integer values, but, as we are converting one of them into <code>float</code>, then the final result will be a real number, with the corresponding fraction digits, and can be stored in a <code>float</code> variable:</p> <pre><code>float result = (float) 3 / 2;\n</code></pre> <p>In general, every arithmetic operation tries to produce a result of the same type of its operands (if we divide two integers, we get an integer result, for instance). However, in certain operations, such as additions or multiplications, Java tries to convert the result to a higher type, and we need to typecast it. In this example, we try to add two byte values, but Java tries to convert the result to <code>int</code>, so we need to specify that we want to keep using a <code>byte</code> as a result (even though we could cause an overflow):</p> <pre><code>byte a = 3, b = 2;\nbyte result = (byte)(a + b);\n</code></pre> <p>If we mix two different types in an arithmetic operation, then Java converts the result to the highest of them. This multiplication gets a <code>float</code> number because one of the operands is <code>float</code>:</p> <pre><code>float a = 3.5f;\nint b = 4;\nfloat result = a * b;\n</code></pre>"},{"location":"01c.html#32-converting-from-to-string","title":"3.2. Converting from / to string","text":"<p>In some situations, we may read numeric values from textual sources, such as text file, or user input. In this case, we need to convert the text into the corresponding numeric value. To do this, Java provides some useful instructions. Here you can see the most useful ones:</p> <ul> <li><code>Integer.parseInt</code> converts a text value into <code>int</code>:</li> </ul> <pre><code>int value = Integer.parseInt(\"23\");\n</code></pre> <ul> <li><code>Float.parseFloat</code>, <code>Double.parseDouble</code>, <code>Byte.parseByte</code>, <code>Short.parseShort</code> and <code>Long.parseLong</code> do the same with their corresponding data types:</li> </ul> <pre><code>float value = Float.parseFloat(\"3.1416\");\n</code></pre> <p>If we want to convert a numeric value into a string, we can choose one of these solutions:</p> <ul> <li>Concatenate the numeric value with an empty string <code>\"\"</code>:</li> </ul> <pre><code>int number = 23;\nString text = \"\" + number;\n</code></pre> <ul> <li>Use <code>String.valueOf</code> instruction to convert the specified value to string:</li> </ul> <pre><code>int number = 23;\nString text = String.valueOf(number);\n</code></pre> <p>Exercise 1</p> <p>Create a program called Ages.java that:</p> <ul> <li>Defines two <code>byte</code> variables to store your age and the age of a friend</li> <li>Defines another <code>byte</code> variable to store the addition of both ages (you may need to typecast the result)</li> <li>Defines a <code>float</code> variable to store the average of these ages, including fraction digits</li> <li>Prints the message \"The age average is \" followed by the average calculated in previous step</li> </ul>"},{"location":"01d.html","title":"Basic input and output","text":"<p>In this document we are going to learn how to interact with final user. First of all, we will see how to print values in the screen using different instructions, and then we will see how to gather information from the keyboard and convert it to the appropriate data type.</p>"},{"location":"01d.html#1-program-output","title":"1. Program output","text":"<p>You can use the <code>System.out.print</code> or <code>System.out.println</code> instruction (depending on whether you want a new line at the end or not) to print messages to the screen. You can join multiple values by using the link operator (<code>+</code>):</p> <pre><code>int result = 12;\nSystem.out.println(\"The result is \" + result);\nSystem.out.print(\"Have a nice day!\");\n</code></pre>"},{"location":"01d.html#11-formatted-output","title":"1.1. Formatted output","text":"<p>Apart from traditional <code>System.out.println</code> instruction to print data, we can use some other options if we want this data to have a given output format. To do this, we can use <code>System.out.printf</code> instruction instead of the previous one. This instruction behaves in a similar way than the original <code>printf</code> function from C language. It has a variable number of parameters, and the first of all is the string to be printed out. Then, this string can have some special characters inside it, which determine the data types that must replace these characters. For instance, if we use this instruction:</p> <pre><code>System.out.printf(\"The number is %d\", number);\n</code></pre> <p>then the symbol <code>%d</code> will be replaced by the variable <code>number</code>, and this variable must be an integer (this is what <code>%d</code> means).</p> <p>There are some other symbols to represent different data types. Here are some of them:</p> <ul> <li><code>%d</code> for integer types (<code>long</code>, <code>int</code>)</li> <li><code>%f</code> for real types (<code>float</code> and <code>double</code>)</li> <li><code>%s</code> for strings</li> <li><code>%c</code> for characters</li> <li><code>%n</code> to represent a new line (similar to <code>\\n</code>, but platform independent). In this case, we don't need to add a parameter at the end of <code>printf</code>.</li> </ul> <p>We can place as many symbols as we want inside the output string, and then we will need to add the corresponding number of parameters at the end of the <code>printf</code> instruction. For instance:</p> <pre><code>System.out.printf(\"The average of %d and %d is %f\", \n    number1, number2, average);\n</code></pre> <p>Besides the primary symbols <code>%d</code> and <code>%f</code>, we can add some other information between the '%' and the letter, that specify some format information. </p> <p>Specifying integer digits</p> <p>For instance, if we want to output an integer with a given number of digits, we can do it this way:</p> <pre><code>System.out.printf(\"The number is %05d\", number);\n</code></pre> <p>where <code>05</code> means that the integer is going to have, at least, 5 digits, and if there are not enough digits in the number, then it will be filled with zeros. The output of this instruction if number is <code>33</code> would be <code>The number is 00033</code>. If we don't put the <code>0</code>, then the number will be filled with whitespaces. So this instruction:</p> <pre><code>System.out.printf(\"The number is %10d\", number);\n</code></pre> <p>if number is <code>33</code>, it would produce the following output: <code>The number is \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a033</code>.</p> <p>Specifying fraction digits</p> <p>In the same way that we format integer numbers, we can format real numbers. We can use the same pattern seen before to specify the total number of integer digits:</p> <pre><code>System.out.printf(\"The number is %3f\", number);\n</code></pre> <p>But, besides, we can specify the total number of fraction digits by adding a point and the total number desired, this way:</p> <pre><code>System.out.printf(\"The number is %3.3f\", number);\n</code></pre> <p>Then, if number is <code>3.14159</code>, the output would be  <code>The number is \u00a0\u00a03.142</code>.</p>"},{"location":"01d.html#2-getting-user-input","title":"2. Getting user input","text":"<p>In order to get the user input, the easiest way may be through the <code>Scanner</code> object. We need to import <code>java.util.Scanner</code> in order to use it, and then we create a <code>Scanner</code> element and call some of its methods to read data from the user. Some of them are <code>nextLine</code> (to read a whole line of text until the user presses Enter) and <code>nextInt</code> (to read an integer explicitly):</p> <pre><code>import java.util.Scanner;\n...\npublic class ClassName\n{ \n    public static void main(String[] args)\n    {\n        Scanner sc = new Scanner(System.in);\n        int number = sc.nextInt();\n        String text = sc.nextLine();    \n        sc.close();\n    }\n</code></pre> <p>There are some other methods, such as <code>nextFloat</code>, <code>nextBoolean</code>... but they are very similar to <code>nextInt</code>, and they help us read specific data types from the input, instead of reading texts and then converting them into the corresponding type (as <code>Console.ReadLine</code> does in C#). You can introduce this data separated by whitespaces or new lines (Intro).</p> <pre><code>int number1, number2;\nnumber1 = sc.nextInt();\nnumber2 = sc.nextInt();\n</code></pre> <p>Be careful when combining data types</p> <p>Let's suppose that you have to read this information from the input:</p> <pre><code>23 43\nHello world\n</code></pre> <p>You may think that you need to use <code>nextInt</code> method twice, and then <code>nextLine</code> method to read the last string, but this approach is NOT correct: when you use <code>nextInt</code> to read the integer values, you don't read the end of line that exists beyond number 43, so, when you use <code>nextLine</code> method once, you just read this new line, but not the second line. The correct sequence would be this one:</p> <pre><code>int number1 = sc.nextInt();\nint number2 = sc.nextInt();\nsc.nextLine(); \nString text = sc.nextLine();\n</code></pre> <p>Third line reads and discards the new line after number 43.</p>"},{"location":"01d.html#21-using-systemconsolereadline","title":"2.1. Using System.console().readLine()","text":"<p>There's an additional way of reading data from user input. It consists in using <code>System.console().readLine()</code> method, which is similar to Scanner's <code>newLine</code> method: it reads the whole line until user presses Intro, so we ALWAYS read a string with this instruction, and we need to convert it to its corresponding data type later:</p> <pre><code>System.out.println(\"Write a number:\");\nString text = System.console().readLine();\nint number = Integer.parseInt(text);\n</code></pre> <p>The main drawback of this instruction is that it doesn't work well in the terminal of some IDEs, since the terminal of this IDE is not a system terminal, so you can't rely on it in certain situations.</p> <p>Exercise 1</p> <p>Create a program called FormattedDate with a class with the same name inside. The program will ask the user to enter the day, month and year of birth (all values are integers). Then, it will print his birth date with the format d/m/y. For instance, if the user types day = 7, month = 11, year = 1990, the program will output 7/11/1990.</p> <p>Exercise 2</p> <p>Create a program called GramOunceConverter that converts from grams to ounces. The program will ask the user to enter a weight in grams (an integer number), and then it will show the corresponding weight in ounces (a real number), taking into account that 1 ounce = 28.3495 grams.</p> <p>Exercise 3</p> <p>Create a program called NumbersStrings. This program must ask the user to enter 4 numbers, that will be stored in 4 <code>String</code> variables. Then, the program will join the first pair of numbers into a single integer value, and the second pair of numbers into another integer value, and then add these values. For instance, if the user types the numbers 23, 11, 45 and 112, then the program will create a first integer value of 2311 and a second integer value of 45112. Then, it will add these two values and get a final result of 47423.</p> <p>Exercise 4</p> <p>Create a program called CircleArea that defines a float constant called <code>PI</code> with the value <code>3.14159</code>. Then, the program will ask the user to enter the radius of a circle, and it will output the area of the circle (<code>PI</code> * radius * radius). This area will be printed with two decimal digits.</p>"},{"location":"01e.html","title":"Writing clean code","text":""},{"location":"01e.html#1-introduction-to-clean-code","title":"1. Introduction to clean code","text":"<p>When we are writing a program, we should not only think about what the program needs to do. We should also ask some other questions to ourselves, such as:</p> <ul> <li>What if I have to take this project back in two years? Will I understand the code?</li> <li>What if anyone else has to take this project in the future? Will he/she understand the code?</li> </ul> <p>After these questions, you should think of a way to write your code so that it will be easy to read and understand. This is where clean code rules come into play.</p>"},{"location":"01e.html#11-what-is-clean-code","title":"1.1. What is clean code?","text":"<p>You can find many examples and good explanations to this question in the book Clean Code, by Robert C. Martin. Here we just summarize some of these ideas:</p> <ul> <li>Code must be elegant and easy to read, simple and direct. Clean code reads like well-written prose (Grady Booch).</li> <li>Logic should be straightforward to make it hard for bugs to hide.</li> <li>Performance should be close to optimal so as not to tempt people to make further changes.</li> <li>Keep in mind the Boy Scout rule: Leave the campground cleaner than you found it</li> </ul>"},{"location":"01e.html#12-the-importance-of-practice","title":"1.2. The importance of practice","text":"<p>Writing clean code not only consists in reading documents like this one to keep in mind some rules. It also consists in putting into practice these rules continuously. For instance, you can read how to ride a bike, but you won't learn how to do it until you practice.</p> <p>Besides, if we don't start writing clean code from the beginning of a project, there may be some terrible consequences later: projects can grow too much, and then it may be hard to apply clean code rules to the whole code: the time we spend fixing the code in the future may affect deadlines, maintenance, future versions...</p>"},{"location":"01e.html#13-why-bad-code-exists","title":"1.3. Why bad code exists?","text":"<p>Although everyone should apply clean code rules in their programs, and we can easily see the benefits of working this way, there are many reasons why bad code exists:</p> <ul> <li>Too tight schedules</li> <li>Unexperienced project managers</li> <li>Programmer's docility (he/she doesn't want to get fired)</li> <li>Boredom (always doing the same kind of projects)</li> <li>...</li> </ul>"},{"location":"01e.html#14-whats-coming-next","title":"1.4. What's coming next?","text":"<p>In this document we are going to focus on some basic aspects of clean code rules, such as how to assign variable names and how to place comments in our code.</p>"},{"location":"01e.html#2-dealing-with-variable-names","title":"2. Dealing with variable names","text":"<p>Names are essential in programming, since we will assign a name to (almost) everything we include in our program. At this point you should already know what a variable is and its main purpose (store values that can be modified along the program execution). But you should not assign a variable name carelessly. You should use meaningful names for your variables. </p> <p>When reading the name of a variable (or any other element in the code), it must answer some basic questions, such as why it exists, what it does and how it is used. If a name requires a comment to explain its meaning, then it is not a suitable name. For instance, if we want to store in a variable the age average of a list of people, we should NOT do this:</p> <pre><code>int a;          // Age average\n</code></pre> <p>We could do this instead:</p> <pre><code>int ageAverage;\n</code></pre> <p>Some other aspects that we should take into account when dealing with variable names:</p> <ul> <li>Try not to use too similar names. Variables like <code>totalRegisteredUsers</code> and <code>totalUnregisteredUsers</code> only differ in two letters, and you could use the wrong one in a given piece of code. It's better to call them <code>registered</code> and <code>anonymous</code>.</li> <li>Add meaningful context when it's necessary. For instance, if a variable is named <code>account</code>, what does it mean? A user account? a bank account? It's better to be more specific, and call it <code>bankAccount</code>, for instance</li> <li>Choose one word per concept: if you declare many variables in many parts of your code to refer to a user login, you should always call them in the same way: <code>user</code>, or <code>login</code>, for instance, but don't change the name in each situation.</li> <li>Don't use short names, such as <code>n</code>, or <code>e</code>, because it will be difficult to find your variable among other similar words in the text.</li> <li>Try to use readable names. It's better to use a name like <code>birthDate</code> than <code>ddmmyyyy</code>, because you can pronounce this name in a conversation.</li> </ul>"},{"location":"01e.html#21-uppercase-or-lowercase","title":"2.1. Uppercase or lowercase?","text":"<p>The use of uppercase and lowercase letters in names depend on the programming language itself. There are mainly four naming standards:</p> <ul> <li>Camel Case: it is used in languages such as Java or Javascript. Every word in the variable name starts with upper case, apart from the first word. For instance:</li> </ul> <pre><code>String personName;\n</code></pre> <ul> <li>There is a subset of camel case standard, called Pascal Case in which the first word of the name also starts with uppercase. This subset is employed by C# to define public elements (private elements are named using camel case). For instance:</li> </ul> <pre><code>string personName;\npublic int PersonAge;\n</code></pre> <ul> <li>Snake Case: it is used in languages such as PHP or Python. Variable words are separated by underscores:</li> </ul> <pre><code>$person_name = \"Nacho\";\n</code></pre> <ul> <li>Kebab Case: variable words are separated by hyphens. It is not very popular among programming languages, since many of them don't allow the hyphen as part of the variable name (so as not to mix it up with the substraction operator). There are some few examples, such as Lisp or Clojure.</li> </ul> <pre><code>(def person-name \"Nacho\")\n</code></pre> <ul> <li>Upper case: it is used in many languages to define constants. The words of the name are usually separated by underscores, as in snake case standard:</li> </ul> <pre><code>static final int MAXIMUM_SIZE = 100;\n</code></pre>"},{"location":"01e.html#3-placing-comments","title":"3. Placing comments","text":"<p>Well-placed comments help us understand the code around them, whereas misplaced comments can damage the understanding of the code. Some programmers think that comments are failures, and should be avoided as much as possible. One of the reasons argued is that they are hard to maintain. If we change the code after writing a comment, we may forget to update the comment, and thus it would talk about something that is no longer present in the code.</p> <p>Another reason to avoid comments is that they are tightly linked to bad code. When we write bad code, we often think that we can write some comments to make it understandable, instead of cleaning the code itself.</p> <p>In this section we will learn where to put comments. Firstly, we will see what type of comments are necessary (what we call good comments), and then we will see what comments are avoidable (bad comments).</p>"},{"location":"01e.html#31-good-comments","title":"3.1. Good comments","text":"<p>The following comments are considered necessary:</p> <ul> <li>Legal comments, such as copyright or authorship, according to the company standards. This type of comments are normally placed at the beginning of each source file that belongs to the author or company.</li> <li>Introduction comments, a short comment at the beginning of each source file (typically classes) that explains the main purpose of this source file or class. This comment is usually placed along with a legal comment at the beginning of a source file:</li> </ul> <pre><code>/*\n This class stores information about a user account\n\n Created by Nacho Iborra\n */\n\npublic class User\n{\n    ...\n}\n</code></pre> <ul> <li>Explanation of intent. These comments are used when:</li> <li>We tried to get a better solution to the problem but we could not, and then we explain that a part of the code could be improvable.</li> <li>There is a part of the code that does not follow the same pattern than the code around it (for instance, an integer variable among a bunch of floats), and we want to explain why we have used this instruction or data type.</li> <li>TODO comments, which are placed in incomplete parts. They help us remember all the pending tasks. This type of comments have become so popular that a lot of IDEs automatically detect and highlight them.</li> <li>API documentation. Some programming languages, such as Java or C#, let us add some comments in some parts of the code so that these comments are exported to HTML or XML format, and become part of the documentation. </li> </ul>"},{"location":"01e.html#32-bad-comments","title":"3.2. Bad comments","text":"<p>The following are examples of bad comments that we can avoid...</p> <p>Some type of information comments can be avoided by changing the name of the element that they are explaining. For instance, if we have this comment with this variable:</p> <pre><code>// Total number of customers\nint total;\n</code></pre> <p>We can avoid the comment by renaming the variable this way:</p> <pre><code>int totalCustomers;\n</code></pre> <p>Redundant comments, i.e. comments that are longer to read than the code they are trying to explain, or they are just unnecessary, because the code is self-explanatory. For instance, the following comment is redundant, since the code it is explaining is quite understandable:</p> <pre><code>/* We ask the user two numbers and add them */\nScanner sc = new Scanner(System.in);\nSystem.out.println(\"Enter two numbers\");\nint number1 = sc.nextInt();\nint number2 = sc.nextInt();\nSystem.out.println(number1 + number2);\n</code></pre> <p>Comments without context, i.e. comments that are not followed by the corresponding code. For instance, the following comment is not completed with appropriate code. We say we are writing data into a file, but nothing is executed after that. Maybe there was some piece of code, but it was removed.</p> <pre><code>/* We ask the user two numbers and add them */\nScanner sc = new Scanner(System.in);\nSystem.out.println(\"Enter two numbers\");\nint number1 = sc.nextInt();\nint number2 = sc.nextInt();\nSystem.out.println(number1 + number2);\n// We print the result in a text file\n</code></pre> <p>There should be no mandated comments. Some people think that every variable, for instance, must have a comment explaining its purpose. But that is not a good decision, since we can avoid most of these comments by using appropriate variable names.</p> <p>Also, there should be no journal comments: sometimes an edit registry is placed at the beginning of a source file. It contains all the changes made to the code, including the date and the reason of the change. But nowadays, we can use version control applications, such as GitHub, to keep this registry out of the code itself.</p> <p>Some time ago, some programmers used to place some position markers and/or code dividers,  to quickly find a place in the code, or to separate some code blocks that are quite long. Both types of comments are not recommended if code is properly formatted.</p> <pre><code>// =================== VARIABLES ====================\nint age;\nString name;\n...\n// =================== MAIN =========================\npublic static void main(String[] args)\n{\n    ...\n    ////// FINAL RESULT\n}\n</code></pre> <p>Closing brace comments are also not recommended. They are placed at every closing brace to explain which element is this brace closing. These comments can be avoided, since most of current IDEs highlight each pair of braces when we click on them, so that we can match each pair automatically. </p> <pre><code>public static void main(String[] args)\n{\n    ...\n} // end main\n</code></pre> <p>Warnings are used when we have some code that may cause problems in certain situations, because it needs to be reviewed. It is very usual to find some code blocks completely commented, and a warning message explaining the problem with it. These comments should be turned into \"TODO\" comments, in order to warn the programmer that this code needs to be reviewed in the future, instead of just removing the comments.</p> <p>Exercise 1</p> <p>This program asks the user to introduce three numbers and gets the average of them. Discuss in class which parts of the code are not clean or could be improved, regarding variable names and comments.</p> <pre><code>import java.util.Scanner;\n\npublic class AverageNumbers\n{\n    public static void main(String[] args)\n    {\n        // Variables to store the three numbers and the average\n        int n1, n2, n3;\n        int Result;\n        Scanner sc = new Scanner(System.in);\n\n        // We ask the user to enter three numbers\n        System.out.println(\"Introduce three numbers:\");\n        n1 = sc.nextInt();\n        n2 = sc.nextInt();\n        n3 = sc.nextInt();\n        // The result is the average of these numbers\n        /* We could have used a float number instead, \n            but we decided to keep this program as \n            simple as we could */\n        Result = (n1+n2+n3)/3;\n        System.out.println(\"The average is \" + Result);\n    }\n}\n</code></pre>"}]}